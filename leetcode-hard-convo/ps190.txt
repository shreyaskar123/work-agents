**Ava**: Hey, Jess and Alex, I've been brainstorming about the algorithm challenge regarding the sum of widths of all non-empty subsequences of an array. Got a minute to discuss it?

**Jess**: Sure, Ava. What's the challenge about specifically?

**Ava**: Okay, so we're given an array of integers. We need to find the sum of the widths of all its non-empty subsequences. The width is defined as the difference between the maximum and minimum elements in a subsequence.

**Alex**: Sounds intriguing. How do you even start with something like this? The number of subsequences grows exponentially with the size of the array, right?

**Ava**: Yeah, exactly. For an array of length `n`, there are 2^n -1 non-empty subsequences. That's why brute-forcing through all subsequences isn't feasible, especially since the array can have up to 20,000 elements.

**Jess**: So, we need a more efficient way to calculate the sum without actually enumerating all subsequences. Is there a pattern or a mathematical concept that could simplify the problem?

**Ava**: That's what I've been pondering. It's about finding a way to calculate the contribution of each element to the total sum, depending on its position in the array, I guess.

**Alex**: I see where you're going. It’s kind of similar to dynamic programming or combinatorics, where you derive the solution not by solving the problem outright but by understanding the contribution of each part.

**Jess**: Right. Each element could be part of many subsequences. Perhaps we can calculate how many times each element will be the max and min in all subsequences it's part of?

**Ava**: Exactly, Jess. It's about leveraging the properties of subsequences and elements' positions. We need a way to efficiently compute each element's total effect on the width sum, considering its frequency as a max and min in the subsequences.

**Alex**: And for that, the array's ordering could provide a clue, maybe? Ordering elements might simplify calculating their positional effects.

**Jess**: Definitely. Also, we should keep the result's modulus in mind. The sum might get huge, and we’re supposed to return it modulo 10^9 + 7.

**Ava**: Right. That's a crucial aspect to avoid integer overflow. I think we’ve outlined a solid approach. To sum up, we need to carefully calculate the contributions with regard to the elements' positions, use combinatorial logic, and handle the large sums correctly.

**Alex**: Sounds like a good plan. Let’s divide the tasks, develop a prototype, and reconvene to integrate our findings. We’ll need to run thorough tests, especially with edge cases.

**Jess**: Agreed. It's going to be a blend of math and coding. Let's tackle this challenge! 

**Ava**: Thanks for the brainstorm, everyone. I'm feeling much more confident about our approach now. Let's get to coding and see what we come up with!