**Alex:** So let's dive into this problem where we're looking to maximize chunks in an array to sort it. How do you reckon we start tackling it?

**Jordan:** First thing that comes to my mind is understanding how these chunks work. Since we can only sort within a chunk, the order of max elements in each chunk matters a lot.

**Sam:** True, it's like saying if we have an array, each chunk's highest number should be less than or equal to the smallest number in the following chunk, right?

**Jordan:** Exactly, Sam. For a chunk to be valid, the maximum number within it shouldn't spill over to the next chunk after sorting.

**Alex:** So how do we identify these chunks, especially given that the elements aren't unique this time?

**Jordan:** A naive approach would be to iterate over the array, trying to find a point where all elements before it are lesser than all elements after. But, considering duplicates and the array's size, this seems inefficient.

**Sam:** What about using some form of a data structure to keep track of the elements we've seen so far and their order?

**Jordan:** That's a step in the right direction. Tracking could help us identify potential chunk boundaries by comparing elements.

**Alex:** And about the constraint mentioning elements up to `10**8` and array length up to `2000`, any special considerations there?

**Jordan:** It means we have to be mindful of our algorithms' time and space complexity. We can't afford to use solutions that scale poorly with array size or element magnitude.

**Sam:** Would pre-processing the array help? Like, mapping elements to their sorted positions or something?

**Jordan:** Potentially, yes. Mapping could simplify comparisons, as we won't be directly dealing with the elements' values but rather their relative positions.

**Alex:** So it sounds like a mix of smart iteration, tracking positions, and perhaps mapping values could lead us to a solution. Without giving the exact steps away, what's a sample question that might guide someone thinking about this?

**Jordan:** Consider asking, "How can I determine if adding the next element to my current chunk will still allow me to sort the entire array when all chunks are merged?" 

**Sam:** That question hints at understanding the relationship between the current element, the current chunk, and the overall array's sort order.

**Alex:** Great, it seems like we've outlined a thoughtful approach to tackling this problem. Anyone trying to solve it will need to balance their understanding of sorting, chunking logic, and efficient data handling. 

**Jordan:** Precisely, and always consider edge cases, especially with non-distinct elements. It adds an additional layer of complexity.

**Sam:** Alright, ready to give this a shot then? Let's start sketching out some pseudocode based on our discussion.

**Alex:** Agreed, breaking it down into smaller tasks will definitely help. Let's do it.