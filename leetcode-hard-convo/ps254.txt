**Emma:** Hey folks, I stumbled upon an interesting problem while preparing for an upcoming code challenge, and I thought this could be something we might want to tackle together. It's about creating a die simulator with certain constraints.

**Liam:** Oh, sounds like a fun exercise! What are the constraints?

**Emma:** So, the simulator generates a random number from 1 to 6 for each roll, right? But here's the twist: we can't roll the number `i` more than `rollMax[i]` times consecutively.

**Ava:** Interesting! So, if I get it right, for each dice face, we have a maximum number of times it can appear in a row?

**Emma:** Exactly, Ava. And given an array of integers `rollMax` and an integer `n`, our job is to return the number of distinct sequences that can be obtained with exactly `n` rolls.

**Liam:** Got it. And by sequences, we're talking about the order and occurrence of numbers in each roll, considering the constraint, right?

**Emma:** Precisely, Liam.

**Ava:** Do you have an example in mind that could help us better visualize the problem?

**Emma:** Sure! Let's say `n = 2`, and `rollMax = [1,1,2,2,2,3]`. Without any constraints, we have 6 * 6 = 36 possible combinations for the two rolls. But, since the numbers 1 and 2 can only appear once consecutively, sequences like (1,1) and (2,2) can't occur. So, subtracting these two, we end up with 34 distinct sequences.

**Liam:** Looks like we'll need a way to track consecutive occurrences and calculate the distinct sequences accordingly. Any ideas on how we might approach this?

**Ava:** Well, a dynamic programming solution comes to mind; it could help us keep track of the sequences while respecting the `rollMax` constraints. We can have a 3D array where we store solutions to subproblems, perhaps?

**Emma:** That’s a solid start, Ava. We could use the first dimension to represent the number of rolls made so far, the second for the last number rolled, and the third for how many times the last number has been rolled consecutively.

**Liam:** I see, this way, we can iterate over the rolls and keep updating our array based on the `rollMax` constraints. Sounds like we’ll also need to figure out a way to transition between states effectively.

**Ava:** Right, and don’t forget we need to return the result modulo `10^9 + 7`. It's easy to overlook that part.

**Emma:** Exactly. I believe this is a good starting point. We’ll need to flesh out the implementation details, of course, like how exactly we transition between states and how we can optimize memory usage. It's going to be an interesting challenge for sure.

**Liam:** Agreed, should we start sketching out some pseudocode and test cases?

**Ava:** Definitely. I'll start setting up a shared document where we can put our thoughts together and work through the problem step by step.

**Emma:** Great teamwork, everyone. Let's dive into it and see what we come up with. This is going to be an excellent exercise in problem-solving and algorithm design.