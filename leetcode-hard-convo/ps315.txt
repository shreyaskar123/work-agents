**Alex**: So, let’s dive into the problem about finding critical and pseudo-critical edges in a graph's MST. Where do we even begin?

**Jordan**: First things first, we need to understand how to find the MST of a given graph. There are classic algorithms for this, like Kruskal’s or Prim’s. 

**Sam**: Right, Kruskal’s algorithm sorts all the edges first and then picks the smallest edges, avoiding cycles, until we’ve got an MST. That might be a good starting point since we need to consider edge weights critically.

**Alex**: How would you go about identifying the critical edges in the MST though?

**Jordan**: It’s a bit tricky, but we can use a straightforward approach. After finding the MST and its total weight, we can try removing each edge of the MST, one at a time, and see if the MST’s total weight increases or if we can’t form an MST anymore.

**Sam**: That sounds computationally heavy. Would that mean recalculating the MST for each edge we remove?

**Jordan**: Essentially, yes. But remember, the graph isn’t changing, just the edges we’re considering for the MST. This step is crucial for identifying critical edges since their removal directly impacts the MST’s weight.

**Alex**: Got it. What about the pseudo-critical edges then?

**Sam**: Pseudo-critical edges add a layer of nuance. They can be in some MSTs but not in others. We could approach this by first adding a specific edge to the graph and then finding the MST.

**Jordan**: Exactly, if by forcing an edge into the graph and then calculating the MST, if the total weight stays the same as the original MST’s weight, it shows that the edge is pseudo-critical. It suggests the edge can be part of an MST without increasing the total weight.

**Alex**: Does that mean for each edge, we have to perform two checks? One to see if its removal makes it critical and another to see if its inclusion finds it pseudo-critical?

**Sam**: Precisely. And keep track of the edges based on these checks. The ones that increase the MST’s weight upon removal are critical. Those that can be added without changing the initial MST’s weight are pseudo-critical.

**Jordan**: The challenge will be efficiently implementing these checks, especially for large graphs. We’ll need to optimize where we can and maybe even leverage data structures that help with quick union-finds for Kruskal’s algorithm.

**Alex**: This sounds like a solid plan. Let’s start by drafting the algorithm to find the MST and then incorporate these checks for critical and pseudo-critical edges. We'll need to carefully manage the array of edges and their weights.

**Sam**: Agreed. Once we have this outline in place, we can refine our approach and ensure our solution is efficient and scalable. Let’s get to it.