**Alex:** Welcome, everyone. Today, we'll tackle an interesting problem involving movement on a square board. We have a character grid where our goal is to move from the bottom right corner, marked 'S', to the top left corner, marked 'E', while maximizing the sum of numeric characters we encounter and also noting the number of such optimal paths.

**Jordan:** That sounds like a fun challenge! Are we considering movements in all directions?

**Morgan:** We can only move up, left, or diagonally to the upper left. Importantly, we must avoid squares with obstacles marked as 'X'.

**Alex:** Correct. And the output we’re looking for is a list of two integers: the first one representing the maximum sum we can collect, and the second the count of paths that yield this maximum, modulo `10^9 + 7`.

**Jordan:** Modulo `10^9 + 7`? Why is that necessary?

**Morgan:** It's a common practice to prevent integer overflow in problems that involve large numbers, especially in combinatorial calculations.

**Jordan:** I see. But how do we approach finding both the maximum sum and the number of optimal paths?

**Alex:** We should consider using dynamic programming. We can tackle this problem by breaking it down into smaller problems, specifically, starting from the end point 'E' and moving towards the start 'S'.

**Morgan:** Exactly, each square should hold two pieces of information: the maximum sum achievable from that square to 'E' and how many ways we can achieve this sum.

**Jordan:** So, for each square, we'll explore all possible moves, accounting for obstacles, and update our sums and paths accordingly?

**Alex:** Yes. And it’s important to start with a base case. For the 'E' square, the sum is initially zero, with one possible path – just staying there.

**Morgan:** From there, we'd work our way backwards, calculating the optimal path sum for each subsequent square by considering the possible moves and avoiding obstacles.

**Jordan:** Got it. And for each square, we need to check conditions to ensure we're not moving into obstacles or outside the board's boundaries, right?

**Alex:** Precisely. It's a bit like a puzzle, where each piece depends on its neighboring pieces. The sum at each point is influenced by the possible moves and the numbers encountered along the way.

**Morgan:** And remember, for the number of paths, if we find multiple routes leading to the same maximum sum from a square, we add up their counts, considering the modulo operation.

**Jordan:** This is starting to make sense. How do we handle cases where there’s no possible path due to obstacles?

**Alex:** If there's no path to 'E' from 'S', our dynamic programming approach would naturally lead to a result of `[0, 0]` for the starting square. Our initial conditions and checks for obstacles ensure that.

**Jordan:** Seems like we have a plan then. Let’s start by identifying the possible moves at each step and carefully implementing the logic to update our sums and path counts.

**Morgan:** Right. And we'll need to iterate carefully across the board, employing recursive calls or iterative loops efficiently to avoid unnecessary calculations.

**Alex:** I'm glad we're on the same page. This overview should give us a solid foundation to start coding the solution. Any more questions before we dive into the implementation details?

**Jordan:** No, I think I have a good understanding now. Thanks for the walkthrough!

**Morgan:** Likewise. Looking forward to seeing our approach in action!

**Alex:** Fantastic! Let’s get to work then, and see how we can turn our strategy into a working solution.